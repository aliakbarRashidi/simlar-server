/*
 * Copyright (C) 2015 The Simlar Authors.
 *
 * This file is part of Simlar. (https://www.simlar.org)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "war"
apply plugin: "findbugs"
apply plugin: "pmd"
apply plugin: "com.github.ben-manes.versions"
apply plugin: "org.owasp.dependencycheck"

def getGitVersion = { ->
    try {
        return "git -C ${rootDir} describe --tags --always --dirty".execute().text.trim()
    }
    catch (ignored) {
        return "git-not-found"
    }
}

version = getGitVersion()

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.4.RELEASE")
        classpath("com.github.ben-manes:gradle-versions-plugin:0.20.0")
        classpath("org.owasp:dependency-check-gradle:3.3.1")
    }
}

bootWar {
    baseName = "simlar-server"
    archiveName = "${baseName}##${version}.war"
    rootSpec.exclude("application-default.properties")
    manifest {
        attributes("Implementation-Version": version)
    }
}

repositories {
    mavenCentral()
}

ext {
    lombokVersion = "1.18.2"
}

dependencies {
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
    testCompileOnly("org.projectlombok:lombok:$lombokVersion")

    implementation("org.springframework.boot:spring-boot-starter-web-services")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("com.google.code.findbugs:annotations:3.0.1")
    implementation("org.apache.commons:commons-lang3:3.8")
    implementation("org.apache.commons:commons-text:1.4")
    implementation("commons-codec:commons-codec:1.11")
    implementation("com.googlecode.libphonenumber:libphonenumber:8.9.13")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("com.h2database:h2:1.4.197")
    testImplementation("org.mockito:mockito-core:2.21.0")
    runtime("org.mariadb.jdbc:mariadb-java-client:2.3.0")

    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat") // disable this to run in IntelliJ CE

    findbugs("com.google.code.findbugs:findbugs:3.0.1")
    /// IntelliJ plugin uses this version
    /// see: https://github.com/andrepdo/findbugs-idea/tree/master/src/src/impl/org/twodividedbyzero/idea/findbugs/plugins
    findbugsPlugins("com.mebigfatguy.fb-contrib:fb-contrib:6.8.2")
}

//noinspection GroovyMissingReturnStatement
test {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}

pmd {
    toolVersion = "6.7.0"
    ruleSetFiles = files("pmd-ruleset.xml")
    ruleSets = [ ]
}

findbugs {
    effort = "max"
    reportLevel = "low"
    excludeFilter = file("$rootProject.projectDir/ides/findbugs/excludeFilter.xml")
}

//noinspection GroovyAssignabilityCheck
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

dependencyCheck {
    suppressionFile = "owasp-dependency-check-suppression.xml"
    failBuildOnCVSS = 0
}

task dependencyChecks {
}
dependencyChecks.dependsOn dependencyCheckAnalyze
dependencyChecks.dependsOn dependencyUpdates

processResources {
    filesMatching("**/application.properties") {
        expand(project.properties)
    }
}

idea {
    module {
        /// IntelliJ inspection excludes
        excludeDirs += file("ides")
        excludeDirs += file("examples")
        excludeDirs += file("pmd-ruleset.xml")
        excludeDirs += file("owasp-dependency-check-suppression.xml")
    }
}
